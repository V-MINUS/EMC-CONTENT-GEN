// Netlify serverless function to handle API requests
const { createServer } = require('http');
const { parse } = require('url');
const next = require('next');

// Handle CORS headers for all responses
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',
  'Access-Control-Max-Age': '86400'
};

// Mock services for electronic music content generation
const mockServices = {
  textGenerator: {
    generateContent: () => {
      return Promise.resolve(`# Electronic Music Content Generator 
      
This is placeholder content generated by the Netlify serverless function. 
When you provide valid API keys in the environment variables, real content will be generated.

## Electronic Music Topics
- EDM production techniques
- Synthesizer programming
- Electronic music artists
- Club promotion
- Music technology`);
    }
  }
};

exports.handler = async (event, context) => {
  // Handle OPTIONS requests for CORS
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: corsHeaders,
      body: JSON.stringify({ success: true })
    };
  }

  try {
    // Log request details for debugging
    console.log('EMC API Request:', {
      path: event.path,
      method: event.httpMethod,
      headers: event.headers,
      USE_MOCK_SERVICES: process.env.USE_MOCK_SERVICES
    });

    // Parse the path to determine what type of request this is
    const path = event.path.replace(/^\/.netlify\/functions\/api/, '');
    
    // Special handling for content generation
    if (path === '/generate' && (event.httpMethod === 'POST' || event.httpMethod === 'PUT')) {
      try {
        // Get request body
        const requestBody = JSON.parse(event.body || '{}');
        
        // Mock response for development/testing
        if (process.env.USE_MOCK_SERVICES === 'true') {
          console.log('Using mock services for content generation');
          
          // Simulate API delay
          await new Promise(resolve => setTimeout(resolve, 500));
          
          // Return mock content based on request type
          if (event.httpMethod === 'POST') {
            return {
              statusCode: 200,
              headers: corsHeaders,
              body: JSON.stringify({
                content: await mockServices.textGenerator.generateContent(),
                plagiarismResult: { isOriginal: true, similarityScore: 2, similarSources: [] },
                seoResult: { 
                  optimizedContent: "Optimized content for electronic music",
                  seoScore: 85,
                  keywordDensity: { 'electronic': 3.2, 'music': 2.8, 'production': 1.5 }
                }
              })
            };
          } else if (event.httpMethod === 'PUT') {
            // Content refinement response
            return {
              statusCode: 200,
              headers: corsHeaders,
              body: JSON.stringify({
                content: `# Refined Electronic Music Content
                
${requestBody.content || ''}

This content has been refined based on your instructions: "${requestBody.instructions || 'No instructions provided'}".
                
The tone has been adjusted to be more ${requestBody.tone || 'professional'}.`,
                success: true
              })
            };
          }
        } else {
          // For production, forward to the Next.js API route
          // This would be implemented when API keys are properly configured
          return {
            statusCode: 501,
            headers: corsHeaders,
            body: JSON.stringify({ 
              error: "API implementation missing. Please set USE_MOCK_SERVICES=true or configure API keys."
            })
          };
        }
      } catch (error) {
        console.error('Error processing generate request:', error);
        return {
          statusCode: 500,
          headers: corsHeaders,
          body: JSON.stringify({ 
            error: error.message || 'Unknown error in generate API',
            success: false 
          })
        };
      }
    }

    // Default response for unhandled paths
    return {
      statusCode: 404,
      headers: corsHeaders,
      body: JSON.stringify({ error: 'API endpoint not found' })
    };
  } catch (error) {
    console.error('Error in API handler:', error);
    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({ error: 'Server error in API handler' })
    };
  }
};
